[{
	"diff": "
	
	@@ -8,8 +8,8 @@ import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.integration.dsl.IntegrationFlow;
	   
	-import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_SERVICE_CALL_INPUT_CHANNEL;
	-import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_SERVICE_CALL_OUTPUT_CHANNEL;
	+import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL;
	+import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL;
	
	@SuppressWarnings(\"SpringJavaAutowiringInspection\")
	@Configuration
	@@ -24,9 +24,9 @@ public class CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfig {
	
      @Bean
      public IntegrationFlow processCustomerpricingRetrievalFlow() {
-        return flow -> flow.channel(CUSTOMER_PRICING_SERVICE_CALL_INPUT_CHANNEL)
+        return flow -> flow.channel(CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL)
                 .transform(customerPricingRetrieveRequestMapper, \"mapFrom\")
                 .handle(customerPricingWebServiceOutboundGateway)
-                .channel(CUSTOMER_PRICING_SERVICE_CALL_OUTPUT_CHANNEL);
+                .channel(CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL);
       }
	  }
	
	",
	"new_path": "src/main/java/com/lv/gi/rating/orchestration/flow/CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfig.java",
	"old_path": "src/main/java/com/lv/gi/rating/orchestration/flow/CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfig.java",
	"a_mode": "100644",
	"b_mode": "100644",
	"new_file": false,
	"renamed_file": false,
	"deleted_file": false
},
{
	"diff": "@@ -1,10 +1,13 @@\n package com.lv.gi.rating.orchestration.flow;\n \n+import com.lv.gi.rating.orchestration.customerpricing.CustomerPricingControl;\n import com.lv.gi.rating.orchestration.de.DataEnrichmentControlService;\n import com.lv.gi.rating.orchestration.model.HomeQuoteModel;\n import com.lv.gi.rating.orchestration.model.QuoteLineOfBusiness;\n+import com.lv.gi.rating.orchestration.model.TransactionType;\n import com.lv.gi.rating.orchestration.transformer.ModelToOrchestrationResponseTransformer;\n import com.lv.gi.rating.orchestration.transformer.OrchestrationRequestToModelTransformer;\n+import com.lv.gi.rating.schema.quote.home.core.ControlType;\n import com.lv.gi.rating.schema.quote.home.quotestore.HomeStoreQuoteResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n@@ -41,6 +44,8 @@ public class QuoteRequestFlowConfig {\n     public static final String DE_SERVICE_CALL_OUTPUT_CHANNEL = \"enrich.dataEnrichmentServiceCall.output\";\n     public static final String DE_SERVICE_RESPONSE_PROCESSOR_INPUT_CHANNEL = \"enrich.dataEnrichmentServiceResponseProcessor.input\";\n     public static final String DE_SERVICE_RESPONSE_PROCESSOR_OUTPUT_CHANNEL = \"enrich.dataEnrichmentServiceResponseProcessor.output\";\n+    public static final String CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL = \"enrich.customerPricingServiceCall.input\";\n+    public static final String CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL = \"enrich.customerPricingServiceCall.output\";\n     public static final String POLARIS_QUOTE_INPUT_CHANNEL = \"enrich.polarisQuote.input\";\n     public static final String POLARIS_QUOTE_OUTPUT_CHANNEL = \"enrich.polarisQuote.output\";\n     public static final String STORE_QUOTE_INPUT_CHANNEL = \"enrich.storeQuote.input\";\n@@ -58,6 +63,8 @@ public class QuoteRequestFlowConfig {\n     public static final String PERSISTENT_FACTORS_MODEL_SETTER = \"persistentFactors\";\n     public static final String CALCULATED_DATA_ENRICHMENTS_MODEL_SETTER = \"calculatedDataEnrichments\";\n     public static final String DE_RESPONSE_MODEL_SETTER = \"dataEnrichmentServiceResponse\";\n+    public static final String CUSTOMER_PRICING_MODEL_SETTER = \"customerPricingServiceResponse\";\n+    public static final String CUSTOMER_PRICING_RENEWAL_FACTORS = \"customerPricingRetrieveRenewalFactors\";\n     public static final String GENERATION_CODE_MODEL_SETTER = \"request.control.generationCode\";\n     public static final String LINE_OF_BUSINESS_HEADER_NAME = \"lineOfBusiness\";\n \n@@ -70,6 +77,9 @@ public class QuoteRequestFlowConfig {\n \n     @Autowired\n     private transient DataEnrichmentControlService dataEnrichmentControlService;\n+    \n+    @Autowired\n+    private transient CustomerPricingControl customerPricingControl;\n \n     @Bean(name = ORCH_REQUEST_INPUT)\n     public MessageChannel quoteRequestInputChannel() {\n@@ -143,6 +153,16 @@ public class QuoteRequestFlowConfig {\n         return MessageChannels.direct().get();\n     }\n \n+    @Bean(name = CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL)\n+    public MessageChannel customerPricingRetrievalServiceEnrichmentInputChannel() {\n+        return MessageChannels.direct().get();\n+    }\n+\n+    @Bean(name = CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL)\n+    public MessageChannel customerPricingRetrievalServiceEnrichmentOutputChannel() {\n+        return MessageChannels.direct().get();\n+    }\n+\n     @Bean(name = POLARIS_QUOTE_INPUT_CHANNEL)\n     public MessageChannel polarisQuoteEnrichmentInputChannel() {\n         return MessageChannels.direct().get();\n@@ -201,6 +221,7 @@ public class QuoteRequestFlowConfig {\n                 .enrich(this::generationCodeEnricher)\n                 .enrich(this::deCalculationEnricher)\n                 .route(ifDEGatewayCallRequired(), routeToDataEnrichmentGatewayOrBypassCall())\n+                .route(ifRetrieveCustomerPricingRenewalFactorsRequired(), routeToCustomerPricingGatewayOrBypassCall())\n \n                 // Insert here enricher to transform HQM -> PolMessage(Input) and set on HomeQuoteModel (uses polarisRequestPayloadMessageMapper)\n                 .enrich(this::polarisRequestEnricher)\n@@ -228,6 +249,23 @@ public class QuoteRequestFlowConfig {\n                 )\n                .defaultOutputToParentFlow();\n     }\n+    \n+    Function<HomeQuoteModel, Boolean> ifRetrieveCustomerPricingRenewalFactorsRequired() {\n+        return homeQuoteModel -> {\n+            final ControlType control = homeQuoteModel.getRequest().getControl();\n+            final QuoteLineOfBusiness lineOfBusiness = QuoteLineOfBusiness.fromString(control.getLineOfBusinessCode());\n+            final TransactionType transactionType = TransactionType.lookup(control.getTransactionType());\n+            return customerPricingControl.shouldRetrieveRenewalFactors(lineOfBusiness, transactionType);\n+        };\n+    }\n+    \n+    Consumer<RouterSpec<Boolean, MethodInvokingRouter>> routeToCustomerPricingGatewayOrBypassCall() {\n+        return routerSpec -> routerSpec.resolutionRequired(false)\n+                .subFlowMapping(true, subFlow ->\n+                        subFlow.enrich(this::customerPricingRetrievalGatewayServiceCallEnricher)\n+                )\n+                .defaultOutputToParentFlow();\n+    }\n \n     private ContentEnricher polarisRequestEnricher(final EnricherSpec enricherSpec) { //NOSONAR There is a Sonar rule which thinks this private method isn't used even though it is\n         return enricherSpec\n@@ -285,6 +323,16 @@ public class QuoteRequestFlowConfig {\n                 .get();\n     }\n \n+    private ContentEnricher customerPricingRetrievalGatewayServiceCallEnricher(final EnricherSpec enricherSpec) { //NOSONAR There is a Sonar rule which thinks this private method isn't used even though it is\n+\n+        return enricherSpec\n+                .requestPayload(Message::getPayload)\n+                .requestChannel(customerPricingRetrievalServiceEnrichmentInputChannel())\n+                .replyChannel(customerPricingRetrievalServiceEnrichmentOutputChannel())\n+                .propertyFunction(CUSTOMER_PRICING_RENEWAL_FACTORS, Message::getPayload)\n+                .get();\n+    }\n+\n     private ContentEnricher polarisQuoteEnricher(final EnricherSpec enricherSpec) { //NOSONAR There is a Sonar rule which thinks this private method isn't used even though it is\n         return enricherSpec\n                 .requestPayload(Message::getPayload)\n",
	"new_path": "src/main/java/com/lv/gi/rating/orchestration/flow/QuoteRequestFlowConfig.java",
	"old_path": "src/main/java/com/lv/gi/rating/orchestration/flow/QuoteRequestFlowConfig.java",
	"a_mode": "100644",
	"b_mode": "100644",
	"new_file": false,
	"renamed_file": false,
	"deleted_file": false
},
{
	"diff": "@@ -26,8 +26,8 @@ import org.springframework.ws.client.core.WebServiceMessageCallback;\n import java.util.Collections;\n import java.util.List;\n \n-import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_SERVICE_CALL_INPUT_CHANNEL;\n-import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_SERVICE_CALL_OUTPUT_CHANNEL;\n+import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL;\n+import static com.lv.gi.rating.orchestration.flow.QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL;\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThat;\n@@ -78,7 +78,7 @@ public class CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfigIntegrati\n                 return true;\n             }\n         };\n-        return new RequestResponseScenario(CUSTOMER_PRICING_SERVICE_CALL_INPUT_CHANNEL, CUSTOMER_PRICING_SERVICE_CALL_OUTPUT_CHANNEL)\n+        return new RequestResponseScenario(CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL, CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL)\n                 .setName(\"test customer pricing retrieval integration\")\n                 .setResponseValidator(validator)\n                 .setPayload(homeQuoteModel);\n",
	"new_path": "src/test/java/com/lv/gi/rating/orchestration/flow/CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfigIntegrationTest.java",
	"old_path": "src/test/java/com/lv/gi/rating/orchestration/flow/CustomerPricingServiceRetrieveRenewalFactorsCallFlowConfigIntegrationTest.java",
	"a_mode": "100644",
	"b_mode": "100644",
	"new_file": false,
	"renamed_file": false,
	"deleted_file": false
},
{
	"diff": "@@ -1,16 +1,19 @@\n package com.lv.gi.rating.orchestration.flow;\n \n+import com.lv.gi.rating.orchestration.customerpricing.CustomerPricingControl;\n import com.lv.gi.rating.orchestration.de.DataEnrichmentControlService;\n import com.lv.gi.rating.orchestration.de.DataEnrichmentIntegrationService;\n import com.lv.gi.rating.orchestration.model.DataEnrichmentDetails;\n import com.lv.gi.rating.orchestration.model.HomeQuoteModel;\n import com.lv.gi.rating.orchestration.model.QuoteLineOfBusiness;\n+import com.lv.gi.rating.orchestration.model.TransactionType;\n import com.lv.gi.rating.orchestration.pf.PersistentFactorIntegrationService;\n import com.lv.gi.rating.orchestration.pf.model.PersistentFactor;\n import com.lv.gi.rating.orchestration.transformer.ModelToOrchestrationResponseTransformer;\n import com.lv.gi.rating.orchestration.transformer.OrchestrationRequestToModelTransformer;\n import com.lv.gi.rating.schema.quote.home.core.ControlType;\n import com.lv.gi.rating.schema.quote.home.core.QuoteResultType;\n+import com.lv.gi.rating.schema.quote.home.customerpricing.RetrieveRenewalFactorsResponse;\n import com.lv.gi.rating.schema.quote.home.orchestration.HomeQuoteOrchestrationRequest;\n import com.lv.gi.rating.schema.quote.home.orchestration.HomeQuoteOrchestrationResponse;\n import com.lv.gi.rating.schema.quote.home.quotestore.HomeStoreQuoteResponse;\n@@ -56,6 +59,8 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     @Autowired\n     private DataEnrichmentControlService dataEnrichmentControlService;\n     @Autowired\n+    private CustomerPricingControl customerPricingControl;\n+    @Autowired\n     private GenericHandler<HomeQuoteModel> generationCodeEnrichmentMock;\n     @Autowired\n     private GenericHandler<HomeQuoteModel> deCalculationEnricherMock;\n@@ -64,6 +69,8 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     @Autowired\n     private GenericHandler<HomeQuoteModel> deGatewayResponseProcessorMock;\n     @Autowired\n+    private GenericHandler<HomeQuoteModel> cpServiceCallEnricherMock;\n+    @Autowired\n     private GenericHandler<HomeQuoteModel> polarisRequestEnricherMock;\n     @Autowired\n     private GenericHandler<HomeQuoteModel> polarisQuoteEnricherMock;\n@@ -78,17 +85,18 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     @Autowired\n     private GenericHandler<HomeQuoteModel> storeQuoteEnricherMock;\n \n+    @Mock private HomeQuoteModel homeQuoteModel;\n     @Mock private HomeQuoteOrchestrationRequest orchestrationRequest;\n     @Mock private ControlType control;\n-    @Mock private HomeQuoteModel homeQuoteModel;\n-    @Mock private HomeQuoteOrchestrationResponse orchestrationResponse;\n+    @Mock private DEResponse dataEnrichmentResponse;\n+    @Mock private RetrieveRenewalFactorsResponse customerPricingRenewalFactors;\n     @Mock private uk.co.polaris.home.payload.request._2017._06.PolMessage polMessage_request;\n     @Mock private PolMessage polMessage_response;\n     @Mock private QuoteResultType quoteResult;\n     @Mock private HomeStoreQuoteResponse storeQuoteResponse;\n     @Mock private QuoteResultType quoteResultWithDEsSerialised;\n     @Mock private QuoteResultType storedQuoteResult;\n-    @Mock private DEResponse dataEnrichmentResponse;\n+    @Mock private HomeQuoteOrchestrationResponse orchestrationResponse;\n \n     @Captor ArgumentCaptor<Map<String,Object>> headerCaptor;\n \n@@ -96,21 +104,25 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     private Set<DataEnrichmentDetails> calculatedDataEnrichmentDetails = new HashSet<>(Collections.singletonList(mock(DataEnrichmentDetails.class)));\n     private Set<DataEnrichmentDetails> processedDataEnrichmentDetails = new HashSet<>(Collections.singletonList(mock(DataEnrichmentDetails.class)));\n \n-    public void configureMocks(final String product) {\n+    public void configureMocks(final String product, String transactiontype) {\n         // ******\n         // IF you are getting weird mock behaviour then make sure the mock is being reset here!!!\n         // ******\n-        Mockito.reset(orchestrationRequest, control, homeQuoteModel, orchestrationResponse, quoteResult, storeQuoteResponse,\n-                quoteResultWithDEsSerialised, storedQuoteResult, dataEnrichmentResponse, polMessage_response, polMessage_request,\n-                polarisQuoteEnricherMock);\n+        Mockito.reset(orchestrationRequest, control, homeQuoteModel,\n+                dataEnrichmentResponse, customerPricingRenewalFactors,\n+                polMessage_request, polMessage_response, polarisQuoteEnricherMock,\n+                quoteResult, quoteResultWithDEsSerialised,\n+                storeQuoteResponse, storedQuoteResult, orchestrationResponse);\n \n         when(homeQuoteModel.getRequest()).thenReturn(orchestrationRequest);\n         when(orchestrationRequest.getControl()).thenReturn(control);\n         when(control.getLineOfBusinessCode()).thenReturn(product);\n+        when(control.getTransactionType()).thenReturn(transactiontype);\n         when(orchestrationRequestToModelTransformer.transform(orchestrationRequest)).thenReturn(homeQuoteModel);\n         when(generationCodeEnrichmentMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(GENERATION_CODE);\n         when(deCalculationEnricherMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(calculatedDataEnrichmentDetails);\n         when(deServiceCallEnricherMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(dataEnrichmentResponse);\n+        when(cpServiceCallEnricherMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(customerPricingRenewalFactors);\n \n         when(polarisRequestEnricherMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(polMessage_request);\n         when(persistentFactorOutputMapperEnricherMock.handle(eq(homeQuoteModel), anyMap())).thenReturn(polMessage_request);\n@@ -133,31 +145,99 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     @Override\n     protected List<RequestResponseScenario> defineRequestResponseScenarios() {\n         List<RequestResponseScenario> scenarios = new ArrayList<>();\n-        scenarios.add(quoteRequestFlowCallDataEnrichmentServiceScenario());\n-        scenarios.add(quoteRequestFlowDontCallDataEnrichmentServiceScenario());\n+        scenarios.add(quoteRequestFlowCallBothDataEnrichmentServiceAndCustomerPricingServiceScenario());\n+        scenarios.add(quoteRequestFlowCallDataEnrichmentServiceButNotCustomerPricingServiceScenario());\n+        scenarios.add(quoteRequestFlowDontCallDataEnrichmentServiceButDoCallCustomerPricingServiceScenario());\n+        scenarios.add(quoteRequestFlowDontCallEitherDataEnrichmentServiceOrCustomerPricingServiceScenario());\n         return scenarios;\n     }\n \n-    private RequestResponseScenario quoteRequestFlowCallDataEnrichmentServiceScenario() {\n+    private InOrder createMessageHandlerInOrder() {\n+        return inOrder(\n+                orchestrationRequestToModelTransformer,\n+                generationCodeEnrichmentMock,\n+                deCalculationEnricherMock,\n+                deServiceCallEnricherMock,\n+                deGatewayResponseProcessorMock,\n+                cpServiceCallEnricherMock,\n+\n+                polarisRequestEnricherMock,\n+                persistentFactorOutputMapperEnricherMock,\n+\n+                polarisQuoteEnricherMock,\n+                persistentFactorInputMapperEnricherMock,\n+                polarisMessageToQuoteResultEnricherMock,\n+                outgoingPersistentDataSerialisationEnricherMock,\n+                storeQuoteEnricherMock,\n+                modelToOrchestrationResponseTransformer);\n+    }\n+\n+    private RequestResponseScenario quoteRequestFlowCallBothDataEnrichmentServiceAndCustomerPricingServiceScenario() {\n+        AbstractResponseValidator<HomeQuoteOrchestrationResponse> responseValidator = new AbstractResponseValidator<HomeQuoteOrchestrationResponse>() {\n+            @Override\n+            protected void validateResponse(HomeQuoteOrchestrationResponse response) {\n+                InOrder messageHandlerOrder = createMessageHandlerInOrder();\n+\n+                //Message handler order set here\n+                messageHandlerOrder.verify(orchestrationRequestToModelTransformer).transform(orchestrationRequest);\n+                messageHandlerOrder.verify(generationCodeEnrichmentMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(deCalculationEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(deServiceCallEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(deGatewayResponseProcessorMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(cpServiceCallEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+\n+                messageHandlerOrder.verify(polarisRequestEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(persistentFactorOutputMapperEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+\n+                messageHandlerOrder.verify(polarisQuoteEnricherMock).handle(eq(homeQuoteModel), headerCaptor.capture());\n+                messageHandlerOrder.verify(persistentFactorInputMapperEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(polarisMessageToQuoteResultEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(outgoingPersistentDataSerialisationEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(storeQuoteEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(modelToOrchestrationResponseTransformer).transform(homeQuoteModel);\n+\n+                messageHandlerOrder.verifyNoMoreInteractions();\n+\n+                verify(homeQuoteModel, times(3)).getRequest();\n+                verify(homeQuoteModel).setCalculatedDataEnrichments(calculatedDataEnrichmentDetails);\n+                verify(homeQuoteModel).setDataEnrichmentServiceResponse(dataEnrichmentResponse);\n+                verify(homeQuoteModel).setCalculatedDataEnrichments(processedDataEnrichmentDetails);\n+                verify(homeQuoteModel).setCustomerPricingRetrieveRenewalFactors(customerPricingRenewalFactors);\n+                verify(homeQuoteModel, times(2)).setPolarisRequestMessage(polMessage_request);\n+                verify(homeQuoteModel).setPolarisResponseMessage(polMessage_response);\n+                verify(homeQuoteModel).setPersistentFactors(persistentFactors);\n+                verify(homeQuoteModel).setQuoteResult(quoteResult);\n+                verify(homeQuoteModel).setQuoteResult(quoteResultWithDEsSerialised);\n+                verify(homeQuoteModel).setQuoteResult(storedQuoteResult);\n+                verify(homeQuoteModel).getCalculatedDataEnrichments();\n+                verifyNoMoreInteractions(homeQuoteModel);\n+                assertEquals(orchestrationResponse, response);\n+                Map<String, Object> header = headerCaptor.getValue();\n+                assertNotNull(header);\n+                assertEquals(QuoteLineOfBusiness.HOME, header.get(LINE_OF_BUSINESS_HEADER_NAME));\n+            }\n+\n+            @Override\n+            protected boolean extractPayload() {\n+                return true;\n+            }\n+        };\n+\n+        InitialisingRequestResponseScenario scenario = new InitialisingRequestResponseScenario(ORCH_REQUEST_INPUT, ORCH_REQUEST_OUTPUT,\n+                () -> {\n+                    when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(true);\n+                    when(customerPricingControl.shouldRetrieveRenewalFactors(QuoteLineOfBusiness.HOME, TransactionType.NB)).thenReturn(true);\n+                }, QuoteLineOfBusiness.HOME.name(), TransactionType.NB.getTransactionAsString());\n+\n+        scenario.setName(\"test enrichment integration\").setResponseValidator(responseValidator).setPayload(orchestrationRequest);\n+        return scenario;\n+    }\n+\n+    private RequestResponseScenario quoteRequestFlowCallDataEnrichmentServiceButNotCustomerPricingServiceScenario() {\n         AbstractResponseValidator<HomeQuoteOrchestrationResponse> responseValidator = new AbstractResponseValidator<HomeQuoteOrchestrationResponse>() {\n             @Override\n             protected void validateResponse(HomeQuoteOrchestrationResponse response) {\n-                InOrder messageHandlerOrder = inOrder(\n-                        orchestrationRequestToModelTransformer,\n-                        generationCodeEnrichmentMock,\n-                        deCalculationEnricherMock,\n-                        deServiceCallEnricherMock,\n-                        deGatewayResponseProcessorMock,\n-\n-                        polarisRequestEnricherMock,\n-                        persistentFactorOutputMapperEnricherMock,\n-\n-                        polarisQuoteEnricherMock,\n-                        persistentFactorInputMapperEnricherMock,\n-                        polarisMessageToQuoteResultEnricherMock,\n-                        outgoingPersistentDataSerialisationEnricherMock,\n-                        storeQuoteEnricherMock,\n-                        modelToOrchestrationResponseTransformer);\n+                InOrder messageHandlerOrder = createMessageHandlerInOrder();\n \n                 //Message handler order set here\n                 messageHandlerOrder.verify(orchestrationRequestToModelTransformer).transform(orchestrationRequest);\n@@ -176,7 +256,9 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n                 messageHandlerOrder.verify(storeQuoteEnricherMock).handle(eq(homeQuoteModel), anyMap());\n                 messageHandlerOrder.verify(modelToOrchestrationResponseTransformer).transform(homeQuoteModel);\n \n-                verify(homeQuoteModel, times(2)).getRequest();\n+                messageHandlerOrder.verifyNoMoreInteractions();\n+\n+                verify(homeQuoteModel, times(3)).getRequest();\n                 verify(homeQuoteModel).setCalculatedDataEnrichments(calculatedDataEnrichmentDetails);\n                 verify(homeQuoteModel).setDataEnrichmentServiceResponse(dataEnrichmentResponse);\n                 verify(homeQuoteModel).setCalculatedDataEnrichments(processedDataEnrichmentDetails);\n@@ -201,37 +283,26 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n         };\n \n         InitialisingRequestResponseScenario scenario = new InitialisingRequestResponseScenario(ORCH_REQUEST_INPUT, ORCH_REQUEST_OUTPUT,\n-                () -> when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(true), QuoteLineOfBusiness.HOME.name());\n+                () -> {\n+                    when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(true);\n+                    when(customerPricingControl.shouldRetrieveRenewalFactors(QuoteLineOfBusiness.HOME, TransactionType.RENEWAL)).thenReturn(false);\n+                }, QuoteLineOfBusiness.HOME.name(), TransactionType.RENEWAL.getTransactionAsString());\n \n         scenario.setName(\"test enrichment integration\").setResponseValidator(responseValidator).setPayload(orchestrationRequest);\n         return scenario;\n     }\n \n-    private RequestResponseScenario quoteRequestFlowDontCallDataEnrichmentServiceScenario() {\n+    private RequestResponseScenario quoteRequestFlowDontCallDataEnrichmentServiceButDoCallCustomerPricingServiceScenario() {\n         AbstractResponseValidator<HomeQuoteOrchestrationResponse> responseValidator = new AbstractResponseValidator<HomeQuoteOrchestrationResponse>() {\n             @Override\n             protected void validateResponse(HomeQuoteOrchestrationResponse response) {\n-                InOrder messageHandlerOrder = inOrder(\n-                        orchestrationRequestToModelTransformer,\n-                        generationCodeEnrichmentMock,\n-                        deCalculationEnricherMock,\n-                        deServiceCallEnricherMock,\n-                        deGatewayResponseProcessorMock,\n-\n-                        polarisRequestEnricherMock,\n-                        persistentFactorOutputMapperEnricherMock,\n-\n-                        polarisQuoteEnricherMock,\n-                        persistentFactorInputMapperEnricherMock,\n-                        polarisMessageToQuoteResultEnricherMock,\n-                        outgoingPersistentDataSerialisationEnricherMock,\n-                        storeQuoteEnricherMock,\n-                        modelToOrchestrationResponseTransformer);\n+                InOrder messageHandlerOrder = createMessageHandlerInOrder();\n \n                 //Message handler order set here\n                 messageHandlerOrder.verify(orchestrationRequestToModelTransformer).transform(orchestrationRequest);\n                 messageHandlerOrder.verify(generationCodeEnrichmentMock).handle(eq(homeQuoteModel), anyMap());\n                 messageHandlerOrder.verify(deCalculationEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(cpServiceCallEnricherMock).handle(eq(homeQuoteModel), anyMap());\n \n                 messageHandlerOrder.verify(polarisRequestEnricherMock).handle(eq(homeQuoteModel), anyMap());\n                 messageHandlerOrder.verify(persistentFactorOutputMapperEnricherMock).handle(eq(homeQuoteModel), anyMap());\n@@ -243,8 +314,11 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n                 messageHandlerOrder.verify(storeQuoteEnricherMock).handle(eq(homeQuoteModel), anyMap());\n                 messageHandlerOrder.verify(modelToOrchestrationResponseTransformer).transform(homeQuoteModel);\n \n-                verify(homeQuoteModel, times(2)).getRequest();\n+                messageHandlerOrder.verifyNoMoreInteractions();\n+\n+                verify(homeQuoteModel, times(3)).getRequest();\n                 verify(homeQuoteModel).setCalculatedDataEnrichments(calculatedDataEnrichmentDetails);\n+                verify(homeQuoteModel).setCustomerPricingRetrieveRenewalFactors(customerPricingRenewalFactors);\n                 verify(homeQuoteModel).setPolarisResponseMessage(polMessage_response);\n                 verify(homeQuoteModel).setPersistentFactors(persistentFactors);\n                 verify(homeQuoteModel, times(2)).setPolarisRequestMessage(polMessage_request);\n@@ -266,7 +340,65 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n         };\n \n         InitialisingRequestResponseScenario scenario = new InitialisingRequestResponseScenario(ORCH_REQUEST_INPUT, ORCH_REQUEST_OUTPUT,\n-                () -> when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(false), QuoteLineOfBusiness.CARAVAN.name());\n+                () -> {\n+                    when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(false);\n+                    when(customerPricingControl.shouldRetrieveRenewalFactors(QuoteLineOfBusiness.CARAVAN, TransactionType.NB)).thenReturn(true);\n+                }, QuoteLineOfBusiness.CARAVAN.name(), TransactionType.NB.getTransactionAsString());\n+        scenario.setName(\"test enrichment integration\").setResponseValidator(responseValidator).setPayload(orchestrationRequest);\n+        return scenario;\n+    }\n+\n+    private RequestResponseScenario quoteRequestFlowDontCallEitherDataEnrichmentServiceOrCustomerPricingServiceScenario() {\n+        AbstractResponseValidator<HomeQuoteOrchestrationResponse> responseValidator = new AbstractResponseValidator<HomeQuoteOrchestrationResponse>() {\n+            @Override\n+            protected void validateResponse(HomeQuoteOrchestrationResponse response) {\n+                InOrder messageHandlerOrder = createMessageHandlerInOrder();\n+\n+                //Message handler order set here\n+                messageHandlerOrder.verify(orchestrationRequestToModelTransformer).transform(orchestrationRequest);\n+                messageHandlerOrder.verify(generationCodeEnrichmentMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(deCalculationEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(cpServiceCallEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+\n+                messageHandlerOrder.verify(polarisRequestEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(persistentFactorOutputMapperEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+\n+                messageHandlerOrder.verify(polarisQuoteEnricherMock).handle(eq(homeQuoteModel), headerCaptor.capture());\n+                messageHandlerOrder.verify(persistentFactorInputMapperEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(polarisMessageToQuoteResultEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(outgoingPersistentDataSerialisationEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(storeQuoteEnricherMock).handle(eq(homeQuoteModel), anyMap());\n+                messageHandlerOrder.verify(modelToOrchestrationResponseTransformer).transform(homeQuoteModel);\n+\n+                messageHandlerOrder.verifyNoMoreInteractions();\n+\n+                verify(homeQuoteModel, times(3)).getRequest();\n+                verify(homeQuoteModel).setCalculatedDataEnrichments(calculatedDataEnrichmentDetails);\n+                verify(homeQuoteModel).setPolarisResponseMessage(polMessage_response);\n+                verify(homeQuoteModel).setPersistentFactors(persistentFactors);\n+                verify(homeQuoteModel, times(2)).setPolarisRequestMessage(polMessage_request);\n+                verify(homeQuoteModel).setQuoteResult(quoteResult);\n+                verify(homeQuoteModel).setQuoteResult(quoteResultWithDEsSerialised);\n+                verify(homeQuoteModel).setQuoteResult(storedQuoteResult);\n+                verify(homeQuoteModel).getCalculatedDataEnrichments();\n+                verifyNoMoreInteractions(homeQuoteModel);\n+                assertEquals(orchestrationResponse, response);\n+                Map<String, Object> header = headerCaptor.getValue();\n+                assertNotNull(header);\n+                assertEquals(QuoteLineOfBusiness.LANDLORD, header.get(LINE_OF_BUSINESS_HEADER_NAME));\n+            }\n+\n+            @Override\n+            protected boolean extractPayload() {\n+                return true;\n+            }\n+        };\n+\n+        InitialisingRequestResponseScenario scenario = new InitialisingRequestResponseScenario(ORCH_REQUEST_INPUT, ORCH_REQUEST_OUTPUT,\n+                () -> {\n+                    when(dataEnrichmentControlService.requiresCallToDataEnrichmentGateway(any())).thenReturn(false);\n+                    when(customerPricingControl.shouldRetrieveRenewalFactors(QuoteLineOfBusiness.LANDLORD, TransactionType.MTA)).thenReturn(false);\n+                }, QuoteLineOfBusiness.LANDLORD.name(), TransactionType.MTA.getTransactionAsString());\n         scenario.setName(\"test enrichment integration\").setResponseValidator(responseValidator).setPayload(orchestrationRequest);\n         return scenario;\n     }\n@@ -293,6 +425,11 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n             return mock(DataEnrichmentControlService.class);\n         }\n \n+        @Bean\n+        public CustomerPricingControl customerPricingControl() {\n+            return mock(CustomerPricingControl.class);\n+        }\n+\n         @Bean\n         public GenericHandler<HomeQuoteModel> generationCodeEnrichmentMock() {\n             return mock(GenericHandler.class);\n@@ -313,6 +450,11 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n             return mock(GenericHandler.class);\n         }\n \n+        @Bean\n+        public GenericHandler<HomeQuoteModel> cpServiceCallEnricherMock() {\n+            return mock(GenericHandler.class);\n+        }\n+\n         @Bean\n         GenericHandler<HomeQuoteModel> polarisRequestEnricherMock() {\n             return mock(GenericHandler.class);\n@@ -377,6 +519,13 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n                     .channel(QuoteRequestFlowConfig.DE_SERVICE_RESPONSE_PROCESSOR_OUTPUT_CHANNEL);\n         }\n \n+        @Bean\n+        public IntegrationFlow cpEnricherServiceCallFlow() {\n+            return flow -> flow.channel(QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_INPUT_CHANNEL)\n+                    .handle(cpServiceCallEnricherMock())\n+                    .channel(QuoteRequestFlowConfig.CUSTOMER_PRICING_RETREIVAL_SERVICE_CALL_OUTPUT_CHANNEL);\n+        }\n+\n         @Bean\n         public IntegrationFlow polarisQuoteEnricherFlow() {\n             return flow -> flow.channel(POLARIS_QUOTE_INPUT_CHANNEL)\n@@ -445,22 +594,25 @@ public class QuoteRequestFlowConfigIntegrationTest extends AbstractRequestRespon\n     {\n         Runnable runnable;\n         String product;\n+        String transactionType;\n \n         InitialisingRequestResponseScenario(String inputChannelName, String outputChannelName,\n-                                            Runnable runnable, String product) {\n+                                            Runnable runnable, String product, String transactionType) {\n             super(inputChannelName, outputChannelName);\n             this.runnable = runnable;\n             this.product = product;\n+            this.transactionType = transactionType;\n         }\n \n+        @SuppressWarnings(\"unused\")\n         public InitialisingRequestResponseScenario(String inputChannelName, String outputChannelName) {\n-            this(inputChannelName, outputChannelName, null, QuoteLineOfBusiness.HOME.name());\n+            this(inputChannelName, outputChannelName, null, QuoteLineOfBusiness.HOME.name(), TransactionType.NB.name());\n         }\n \n         @Override\n         protected void init() {\n             super.init();\n-            QuoteRequestFlowConfigIntegrationTest.this.configureMocks(product);\n+            QuoteRequestFlowConfigIntegrationTest.this.configureMocks(product, transactionType);\n             if (runnable != null)\n             {\n                 runnable.run();\n",
	"new_path": "src/test/java/com/lv/gi/rating/orchestration/flow/QuoteRequestFlowConfigIntegrationTest.java",
	"old_path": "src/test/java/com/lv/gi/rating/orchestration/flow/QuoteRequestFlowConfigIntegrationTest.java",
	"a_mode": "100644",
	"b_mode": "100644",
	"new_file": false,
	"renamed_file": false,
	"deleted_file": false
}]